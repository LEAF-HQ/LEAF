{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LEAF: An LHC Event Analysis Framework Welcome to the documentation for the LHC event analysis framework (LEAF)! If you have not used LEAF before, it is advisable to read the intoduction below, it will give an overview over the different purposes LEAF can be used for. Otherwise, you might as well just skip it and refer to the documentation of the individual packages for in-depth information. Introduction LEAF is a versatile, relatively lightweight framework that allows to perform multiple steps common to about every LHC data analysis. It has several \"packages\", each of which may be used for a different task analysts might encounter on their way from a theoretical model to a full publication. LEAF may currently only be used for CMS data analysis, as it is specific to the data format adopted in the CMS Collaboration. Additionally, it is only configured for use with the PSI Tier-3 SLURM cluster, but it is possible to extend it to different infrastructures. Instructions on how to install and complie LEAF can be found on the Installation page. Brief introductions to all packages are given below on this page, in-depth information can be found in the pages linked in the respective section. The typical workflow from zero to a full physics result usually follows the order in which packages are introduced here. Generator The Generator package is used in the very beginning of an analysis to generate signal samples from a theoretical model in the UFO format using the MadGraph5_aMCatNLO event generator. A UFO model is often provided by authors of phenomenological papers. With the Generator, it is possible to privately generate events of whatever process the model is able to simulate and to process them down the chain of all data formats employed by CMS. Tuplizer The Tuplizer packages picks up where the Generator left. It is used to convert samples from a CMS event format to the format used by LEAF. This means that it is possible to process both samples generated privately and those produced centrally. It can access files stored anywhere in the LHC computing grid (LCG), be it local, Tier-3, or Tier-2 storage elements. Depending on the need of the users new versions of tuples can be generated in certain intervals. Using the database integrated in the Generator package, it is possible to use a common set of tuples for all users, such that it is not necessary for everyone to generate their own tuples. Analyzer The Analyzer package arguably is the most heavily used LEAF package. It reads events in the LEAF format generated by the Tuplizer and offers all functionalities to perform a full-fledged data analysis. Event selection and the generation of histograms in a concise and efficient way are the key features of this package. It is interfaced to the Tuplizer in order to ensure a consistent data format. However, every user is given the possibility to extend it according to their needs, making the Analyzer a very versatile tool able to accomodate various flavors of analyses. Submitter The Submitter package is a helper tool for the Analyzer . It allows for convenient yet efficient submission to the PSI Tier-3 cluster. It takes care of the parallelized (re-)submission of Analyzer jobs, retrieving the output, merging individual and groups of processes and prepare them for plotting. No coding should be necessary for a user of LEAF here. Plotter The Plotter is the last package in the LEAF chain. Having been processed by the Analyzer and Submitter packages, all histograms stored in a file according to the LEAF format can be visualized by the Plotter. It offers customizability and a coherent style of plots as well as the option to save plots in a collated way or individually.","title":"Home"},{"location":"#leaf-an-lhc-event-analysis-framework","text":"Welcome to the documentation for the LHC event analysis framework (LEAF)! If you have not used LEAF before, it is advisable to read the intoduction below, it will give an overview over the different purposes LEAF can be used for. Otherwise, you might as well just skip it and refer to the documentation of the individual packages for in-depth information.","title":"LEAF: An LHC Event Analysis Framework"},{"location":"#introduction","text":"LEAF is a versatile, relatively lightweight framework that allows to perform multiple steps common to about every LHC data analysis. It has several \"packages\", each of which may be used for a different task analysts might encounter on their way from a theoretical model to a full publication. LEAF may currently only be used for CMS data analysis, as it is specific to the data format adopted in the CMS Collaboration. Additionally, it is only configured for use with the PSI Tier-3 SLURM cluster, but it is possible to extend it to different infrastructures. Instructions on how to install and complie LEAF can be found on the Installation page. Brief introductions to all packages are given below on this page, in-depth information can be found in the pages linked in the respective section. The typical workflow from zero to a full physics result usually follows the order in which packages are introduced here.","title":"Introduction"},{"location":"#generator","text":"The Generator package is used in the very beginning of an analysis to generate signal samples from a theoretical model in the UFO format using the MadGraph5_aMCatNLO event generator. A UFO model is often provided by authors of phenomenological papers. With the Generator, it is possible to privately generate events of whatever process the model is able to simulate and to process them down the chain of all data formats employed by CMS.","title":"Generator"},{"location":"#tuplizer","text":"The Tuplizer packages picks up where the Generator left. It is used to convert samples from a CMS event format to the format used by LEAF. This means that it is possible to process both samples generated privately and those produced centrally. It can access files stored anywhere in the LHC computing grid (LCG), be it local, Tier-3, or Tier-2 storage elements. Depending on the need of the users new versions of tuples can be generated in certain intervals. Using the database integrated in the Generator package, it is possible to use a common set of tuples for all users, such that it is not necessary for everyone to generate their own tuples.","title":"Tuplizer"},{"location":"#analyzer","text":"The Analyzer package arguably is the most heavily used LEAF package. It reads events in the LEAF format generated by the Tuplizer and offers all functionalities to perform a full-fledged data analysis. Event selection and the generation of histograms in a concise and efficient way are the key features of this package. It is interfaced to the Tuplizer in order to ensure a consistent data format. However, every user is given the possibility to extend it according to their needs, making the Analyzer a very versatile tool able to accomodate various flavors of analyses.","title":"Analyzer"},{"location":"#submitter","text":"The Submitter package is a helper tool for the Analyzer . It allows for convenient yet efficient submission to the PSI Tier-3 cluster. It takes care of the parallelized (re-)submission of Analyzer jobs, retrieving the output, merging individual and groups of processes and prepare them for plotting. No coding should be necessary for a user of LEAF here.","title":"Submitter"},{"location":"#plotter","text":"The Plotter is the last package in the LEAF chain. Having been processed by the Analyzer and Submitter packages, all histograms stored in a file according to the LEAF format can be visualized by the Plotter. It offers customizability and a coherent style of plots as well as the option to save plots in a collated way or individually.","title":"Plotter"},{"location":"installation/","text":"Installation Getting the code Getting the LEAF code is easy, there is a script that takes care of everything for you. It will set up LEAF and a CMSSW version in the directory the script is executed from. You will need access to /cvmfs in order for the compilation to work. To set get LEAF, do: wget https://raw.githubusercontent.com/reimersa/LEAF/master/get_leaf.sh source get_leaf.sh Initial compilation After downloading the code and checking out the necessary repositories, most notably the JECDatabase and JRDatabase, some packages of LEAF must be compiled to generate all executables used in the various steps of a data analysis: cd Analyzer make clean make -j cd ../Plotter make clean make -j cd .. At this point, LEAF is fully functional and its packages can be used. However, if it is intended to perform a usual data analysis, it is necessary to set up a new analysis skeleton, which can be modified and extended according to each user's needs and wishes. Here is how: Setting up a new analysis There is a handy macro that creates all structures needed for a new analysis and integrates it into the LEAF compilation workflow. All that needs to be done is cd $LEAFPATH/Analyzer ./createNewAnalysis.py NewAnalysisName make clean make -j This will create all necessary files and folders for the new analysis to be compiled and linked automatically when comiling the Analyzer package. See the Analyzer documentation for details. It is advisable to choose a concise name for NewAnalysisName , it will be typed frequently. Also make sure the first few letters are convenient to type.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#getting-the-code","text":"Getting the LEAF code is easy, there is a script that takes care of everything for you. It will set up LEAF and a CMSSW version in the directory the script is executed from. You will need access to /cvmfs in order for the compilation to work. To set get LEAF, do: wget https://raw.githubusercontent.com/reimersa/LEAF/master/get_leaf.sh source get_leaf.sh","title":"Getting the code"},{"location":"installation/#initial-compilation","text":"After downloading the code and checking out the necessary repositories, most notably the JECDatabase and JRDatabase, some packages of LEAF must be compiled to generate all executables used in the various steps of a data analysis: cd Analyzer make clean make -j cd ../Plotter make clean make -j cd .. At this point, LEAF is fully functional and its packages can be used. However, if it is intended to perform a usual data analysis, it is necessary to set up a new analysis skeleton, which can be modified and extended according to each user's needs and wishes. Here is how:","title":"Initial compilation"},{"location":"installation/#setting-up-a-new-analysis","text":"There is a handy macro that creates all structures needed for a new analysis and integrates it into the LEAF compilation workflow. All that needs to be done is cd $LEAFPATH/Analyzer ./createNewAnalysis.py NewAnalysisName make clean make -j This will create all necessary files and folders for the new analysis to be compiled and linked automatically when comiling the Analyzer package. See the Analyzer documentation for details. It is advisable to choose a concise name for NewAnalysisName , it will be typed frequently. Also make sure the first few letters are convenient to type.","title":"Setting up a new analysis"},{"location":"packages/analyzer/","text":"Analyzer","title":"Analyzer"},{"location":"packages/analyzer/#analyzer","text":"","title":"Analyzer"},{"location":"packages/generator/","text":"Generator","title":"Generator"},{"location":"packages/generator/#generator","text":"","title":"Generator"},{"location":"packages/plotter/","text":"Plotter","title":"Plotter"},{"location":"packages/plotter/#plotter","text":"","title":"Plotter"},{"location":"packages/submitter/","text":"Submitter","title":"Submitter"},{"location":"packages/submitter/#submitter","text":"","title":"Submitter"},{"location":"packages/tuplizer/","text":"Tuplizer","title":"Tuplizer"},{"location":"packages/tuplizer/#tuplizer","text":"","title":"Tuplizer"}]}